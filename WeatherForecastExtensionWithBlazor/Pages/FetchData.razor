@page "/index.html"
@inject IJSRuntime Runtime;

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
<p>location: @City.name (@City.coord.lat, @City.coord.lon)</p>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Precipitation (mm/3h)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.dt_txt</td>
                    <td>@forecast.main.temp</td>
                    <td>@((forecast.rain?.threeh ?? 0) + (forecast.snow?.threeh ?? 0))</td>
                    <td>@forecast.weather.FirstOrDefault()?.description</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    HttpClient Http = new HttpClient();
    const string AppID = "sample";
    static readonly Uri BaseURL = new Uri("https://api.openweathermap.org");
    private City City;
    private Forecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        var coord = await GetCoordAsync();
        var query = new Uri(BaseURL, $"/data/2.5/forecast?lat={coord.lat}&lon={coord.lon}&units=metric&appid={AppID}");
        var forecast = await Http.GetJsonAsync<Forecasts>(query.AbsoluteUri);
        City = forecast.city;
        forecasts = forecast.list;
    }

    private async Task<Coord> GetCoordAsync()
    {
        return await Runtime.InvokeAsync<Coord>("get_coord");
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
